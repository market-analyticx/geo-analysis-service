require('dotenv').config();
const fs = require('fs');

const config = {
  // Server configuration
  nodeEnv: process.env.NODE_ENV || 'development',
  port: parseInt(process.env.PORT, 10) || 3000,
  
  // Claude configuration - Enhanced for comprehensive analysis
  claude: {
    apiKey: process.env.CLAUDE_API_KEY,
    model: process.env.CLAUDE_MODEL || 'claude-3-5-sonnet-20241022',
    maxTokens: 8192, // Maximum for Claude Sonnet 3.5
    inputLimit: 200000, // Input token limit
    description: 'Claude 3.5 Sonnet - Optimized for comprehensive brand analysis',
    
    // Rate limits for different tiers
    rateLimits: {
      tier1: {
        requestsPerMinute: 5,
        outputTokensPerMinute: 20000
      },
      tier2: {
        requestsPerMinute: 50,
        outputTokensPerMinute: 40000
      },
      tier3: {
        requestsPerMinute: 1000,
        outputTokensPerMinute: 80000
      }
    }
  },
  
  // Available models for reference
  availableModels: {
    'claude-3-5-sonnet-20241022': {
      name: 'Claude 3.5 Sonnet',
      maxTokens: 8192,
      inputLimit: 200000,
      description: 'Most capable model for complex analysis',
      recommended: true
    },
    'claude-3-5-haiku-20241022': {
      name: 'Claude 3.5 Haiku',
      maxTokens: 8192,
      inputLimit: 200000,
      description: 'Faster model for simpler tasks',
      recommended: false
    }
  },
  
  // API security
  apiKey: process.env.API_KEY,
  
  // Rate limiting - Enhanced for comprehensive analysis
  rateLimitWindowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS, 10) || 3600000, // 1 hour
  rateLimitMaxRequests: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS, 10) || 50, // Increased for comprehensive analysis
  
  // Logging
  logLevel: process.env.LOG_LEVEL || 'info',
  
  // Storage - Enhanced with brand folder support
  reportsDir: process.env.REPORTS_DIR || './reports',
  logsDir: process.env.LOGS_DIR || './logs',
  
  // Form validation limits
  formLimits: {
    maxCompetitors: 5,
    maxTopics: 4,
    maxPrompts: 4,
    maxPersonasLength: 1000,
    maxPromptLength: 500,
    maxTopicLength: 200,
    maxCompetitorLength: 100
  },
  
  // Analysis features
  features: {
    brandFolderOrganization: true,
    comprehensiveAnalysis: true,
    competitorGeneration: true,
    topicIdentification: true,
    promptDevelopment: true,
    personaCreation: true,
    fullTextResponse: true
  }
};

// Create directories with brand folder support
const createDirectories = () => {
  const dirs = [config.reportsDir, config.logsDir];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      try {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`✅ Created directory: ${dir}`);
      } catch (error) {
        console.error(`❌ Failed to create directory ${dir}:`, error.message);
        process.exit(1);
      }
    }
  });
  
  // Create a sample brand folder structure documentation
  const readmePath = `${config.reportsDir}/README.md`;
  if (!fs.existsSync(readmePath)) {
    const readmeContent = `# Reports Directory Structure

This directory contains AI/LLM Brand Visibility Analysis reports organized by brand.

## Structure:
\`\`\`
reports/
├── brand_name_1/
│   ├── brand_name_1_analysis_2024-01-15_14-30-45_abc123.txt
│   └── brand_name_1_analysis_2024-01-20_09-15-30_def456.txt
├── brand_name_2/
│   └── brand_name_2_analysis_2024-01-18_16-20-10_ghi789.txt
└── README.md
\`\`\`

## Features:
- Each brand gets its own folder for organized storage
- Timestamped file names for easy tracking
- Complete analysis reports with metadata
- Client contact information preserved
- Form data integration documented

## File Naming Convention:
\`brand_name_analysis_YYYY-MM-DD_HH-mm-ss_requestId.txt\`

Generated by Geo Analysis Service v2.0.0
`;
    
    try {
      fs.writeFileSync(readmePath, readmeContent);
      console.log(`📝 Created README.md in reports directory`);
    } catch (error) {
      console.warn(`⚠️ Could not create README.md: ${error.message}`);
    }
  }
};

// Validation
const validateConfig = () => {
  const errors = [];
  
  if (!config.claude.apiKey) {
    errors.push('CLAUDE_API_KEY is required');
  }
  
  if (!config.apiKey) {
    errors.push('API_KEY is required');
  }
  
  if (config.apiKey && config.apiKey.length < 16) {
    errors.push('API_KEY should be at least 16 characters long');
  }
  
  // Validate Claude model
  if (!config.availableModels[config.claude.model]) {
    console.warn(`⚠️ Warning: Model ${config.claude.model} not in available models list`);
  }
  
  if (errors.length > 0) {
    console.error('❌ Configuration errors:');
    errors.forEach(error => console.error(`   - ${error}`));
    console.error('\nPlease check your .env file.');
    process.exit(1);
  }
};

// Initialize
createDirectories();
validateConfig();

console.log('✅ Configuration loaded successfully');
console.log(`🤖 Model: ${config.claude.model}`);
console.log(`🎯 Max output tokens: ${config.claude.maxTokens.toLocaleString()}`);
console.log(`📥 Max input tokens: ${config.claude.inputLimit.toLocaleString()}`);
console.log(`⚡ Rate limit: ${config.rateLimitMaxRequests} requests/hour`);
console.log(`📁 Reports directory: ${config.reportsDir}`);
console.log(`🔧 Features enabled: ${Object.entries(config.features).filter(([k,v]) => v).map(([k,v]) => k).join(', ')}`);

module.exports = config;